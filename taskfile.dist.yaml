---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3.38"

# Library of general-purpose tasks, ported to Windows.
# Command Prompt is used if the task is simple enough, since Command Prompt is fast.
# PowerShell 7 is used for more complex tasks.

vars:
  GO_VERSION: "1.23.0"
  GOLANGCI_LINT_VERSION: "1.60.3"

  TOOLS_DIR_NAME: "{{osBase .ROOT_DIR}}-tools"
  TOOLS_DIR: '{{joinPath .ROOT_DIR ".." .TOOLS_DIR_NAME | clean}}'
  GOPATH: '{{joinPath .TOOLS_DIR "gopath"}}'
  GOPATH_BIN_DIR: '{{joinPath .TOOLS_DIR "gopath" "bin"}}'
  GOROOT_BIN_DIR: '{{joinPath .TOOLS_DIR "goroot" "bin"}}'
  VSCODE_PATH: '{{joinPath .TOOLS_DIR "vscode" "bin" "code"}}{{if eq OS "windows"}}.cmd{{end}}'
  PATH_VAR_SEP: '{{if eq OS "windows"}};{{else}}:{{end}}'
  # NOTE: Ideally we could specify environment variables like GOPATH and PATH in the "env" section,
  # but that feature is severely busted: https://github.com/go-task/task/issues/1038
  PATH: '{{.GOPATH_BIN_DIR}}{{.PATH_VAR_SEP}}{{.GOROOT_BIN_DIR}}{{.PATH_VAR_SEP}}{{env "PATH"}}'

includes:
  util:
    taskfile: "taskfile_{{OS}}.yaml"
    internal: true

tasks:
  default:
    deps:
      - verify

  # Top-level meta tasks

  # All tools and dependencies needed to build this project.
  toolchain:
    run: once
    deps:
      - download-go
      - create-gopath
      - download-go-tools
      - environment-scripts

  verify:
    run: once
    deps:
      - toolchain
      - lint

  # Verification tasks
  lint:
    run: once
    deps:
      - toolchain
    cmds:
      - |
        export GOPATH={{.GOPATH | shellQuote}}
        export PATH={{.PATH | shellQuote}}
        golangci-lint run

  # Create the "-tools" directory if it does not already exist
  create-tools:
    run: once
    cmds:
      - task: util:mkdir
        vars: { DIR: "{{.TOOLS_DIR}}" }

  # Download Go and create GOPATH
  download-go:
    run: once
    deps:
      - create-tools
    cmds:
      - task: util:download-go
        vars:
          VERSION: "{{.GO_VERSION}}"
          DESTINATION_PARENT: "{{.TOOLS_DIR}}"
  create-gopath:
    run: once
    deps:
      - create-tools
    cmds:
      - task: util:mkdir
        vars: { DIR: "{{.GOPATH_BIN_DIR}}" }

  # Download various go tools
  download-go-tools:
    run: once
    deps:
      - create-gopath
      - download-go
    cmds:
      - task: util:download-golangci-lint
        vars:
          VERSION: "{{.GOLANGCI_LINT_VERSION}}"
          TOOLS_DIR: "{{.TOOLS_DIR}}"
          GOPATH_BIN_DIR: "{{.GOPATH_BIN_DIR}}"
      - |
        export GOPATH={{.GOPATH | shellQuote}}
        export PATH={{.PATH | shellQuote}}
        go install github.com/daixiang0/gci@v0.13.5

  # Create convenience scripts for setting environment variables
  environment-scripts:
    run: once
    deps:
      - download-go
      - create-gopath
    vars:
      TASKPATH: '{{joinPath .TOOLS_DIR "task"}}'
      SHPATH: >-
        {{.GOROOT_BIN_DIR | toSlash}}:{{.GOPATH_BIN_DIR | toSlash}}:{{.TASKPATH | toSlash}}:$PATH
    cmds:
      - task: util:write-file
        vars:
          FILE: '{{joinPath .TOOLS_DIR "setvars.cmd"}}'
          CONTENT: |-
            @echo off
            set GOPATH={{.GOPATH | fromSlash}}
            set PATH={{.GOROOT_BIN_DIR | fromSlash}};{{.GOPATH_BIN_DIR | fromSlash}};^
            {{.TASKPATH | fromSlash}};%PATH%
          NO_OVERWRITE: false
      - task: util:write-file
        vars:
          FILE: '{{joinPath .TOOLS_DIR "setvars.ps1"}}'
          CONTENT: |-
            $env:GOPATH = '{{.GOPATH | fromSlash | replace "'" "''"}}'
            $env:PATH = ('{{.GOROOT_BIN_DIR | fromSlash | replace "'" "''"}};' + `
                '{{.GOPATH_BIN_DIR | fromSlash | replace "'" "''"}};' + `
                '{{.TASKPATH | fromSlash | replace "'" "''"}};' + $env:PATH)
          NO_OVERWRITE: false
      - task: util:write-file
        vars:
          FILE: '{{joinPath .TOOLS_DIR "setvars.sh"}}'
          CONTENT: |-
            export GOPATH={{.GOPATH | toSlash | shellQuote}}
            export PATH={{.GOROOT_BIN_DIR | toSlash | shellQuote}}:\
            {{.GOPATH_BIN_DIR | toSlash | shellQuote}}:{{.TASKPATH | toSlash | shellQuote}}:"$PATH"
          NO_OVERWRITE: false

  # Download and configure Visual Studio Code
  download-vscode:
    run: once
    deps:
      - create-tools
    cmds:
      - task: util:download-vscode
        vars:
          DESTINATION_PARENT: "{{.TOOLS_DIR}}"

  download-vscode-extensions:
    run: once
    deps:
      - download-vscode
    cmds:
      - "{{.VSCODE_PATH | shellQuote}} --install-extension golang.go --force"
      - "{{.VSCODE_PATH | shellQuote}} --install-extension ms-vscode.powershell --force"
      - "{{.VSCODE_PATH | shellQuote}} --install-extension ms-vscode-remote.remote-wsl --force"
      # The RedHat YAML extension is recommended per https://taskfile.dev/integrations/
      - "{{.VSCODE_PATH | shellQuote}} --install-extension redhat.vscode-yaml --force"
      - "{{.VSCODE_PATH | shellQuote}} --install-extension task.vscode-task --force"

  # Runs Visual Studio code
  code:
    run: once
    deps:
      - toolchain
      - download-vscode
      - download-vscode-extensions
      - vscode-settings
    cmds:
      - "{{.VSCODE_PATH | shellQuote}} --add ."

  # Create default settings file if it doesn't already exist.
  vscode-settings:
    run: once
    vars:
      GOTOOL: '{{joinPath .TOOLS_DIR "goroot" "bin" "go"}}{{exeExt}}'
      TASKPATH: '{{joinPath .TOOLS_DIR "task" "task"}}{{exeExt}}'
    deps:
      - toolchain
    cmds:
      - task: util:mkdir
        vars:
          DIR: ".vscode"
      - task: util:write-file
        vars:
          FILE: ".vscode/settings.json"
          CONTENT: |-
            {
                "[bat]": {
                    "files.eol": "\r\n",
                },
                "[markdown]": {
                    "editor.rulers": []
                },
                "editor.rulers": [
                    100
                ],
                "files.autoSave": "afterDelay",
                "files.eol": "\n",
                "go.alternateTools": {
                    "go": {{.GOTOOL | toJson}}
                },
                "go.lintTool": "golangci-lint",
                "go.gopath": {{.GOPATH | toJson}},
                "task": {
                    "path": {{.TASKPATH | toJson}}
                }
            }
          NO_OVERWRITE: true
